"use client"

import { useEffect, useRef } from "react"
import * as d3 from "d3"

interface VulnerabilityTrendChartProps {
  timeRange: string
}

export default function VulnerabilityTrendChart({ timeRange }: VulnerabilityTrendChartProps) {
  const svgRef = useRef<SVGSVGElement>(null)

  useEffect(() => {
    if (!svgRef.current) return

    // Clear any existing SVG content
    d3.select(svgRef.current).selectAll("*").remove()

    // Generate sample data based on time range
    const data = generateData(timeRange)

    // Set up dimensions
    const margin = { top: 20, right: 30, bottom: 40, left: 50 }
    const width = svgRef.current.clientWidth - margin.left - margin.right
    const height = 400 - margin.top - margin.bottom

    // Create SVG
    const svg = d3
      .select(svgRef.current)
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`)

    // X scale
    const x = d3
      .scaleTime()
      .domain(d3.extent(data, (d) => d.date) as [Date, Date])
      .range([0, width])

    // Y scale
    const y = d3
      .scaleLinear()
      .domain([0, d3.max(data, (d) => Math.max(d.critical, d.high, d.medium, d.low)) as number])
      .nice()
      .range([height, 0])

    // Add X axis
    svg
      .append("g")
      .attr("transform", `translate(0,${height})`)
      .call(d3.axisBottom(x))
      .selectAll("text")
      .attr("fill", "#9ca3af")
      .style("text-anchor", "end")
      .attr("dx", "-.8em")
      .attr("dy", ".15em")
      .attr("transform", "rotate(-45)")

    // Add Y axis
    svg.append("g").call(d3.axisLeft(y)).selectAll("text").attr("fill", "#9ca3af")

    // Add grid lines
    svg
      .append("g")
      .attr("class", "grid")
      .call(
        d3
          .axisLeft(y)
          .tickSize(-width)
          .tickFormat(() => ""),
      )
      .selectAll("line")
      .attr("stroke", "#374151")
      .attr("stroke-opacity", 0.3)

    // Define line generators
    const lineCritical = d3
      .line<any>()
      .x((d) => x(d.date))
      .y((d) => y(d.critical))
      .curve(d3.curveMonotoneX)

    const lineHigh = d3
      .line<any>()
      .x((d) => x(d.date))
      .y((d) => y(d.high))
      .curve(d3.curveMonotoneX)

    const lineMedium = d3
      .line<any>()
      .x((d) => x(d.date))
      .y((d) => y(d.medium))
      .curve(d3.curveMonotoneX)

    const lineLow = d3
      .line<any>()
      .x((d) => x(d.date))
      .y((d) => y(d.low))
      .curve(d3.curveMonotoneX)

    // Add lines
    svg
      .append("path")
      .datum(data)
      .attr("fill", "none")
      .attr("stroke", "#ef4444")
      .attr("stroke-width", 2)
      .attr("d", lineCritical)

    svg
      .append("path")
      .datum(data)
      .attr("fill", "none")
      .attr("stroke", "#f97316")
      .attr("stroke-width", 2)
      .attr("d", lineHigh)

    svg
      .append("path")
      .datum(data)
      .attr("fill", "none")
      .attr("stroke", "#eab308")
      .attr("stroke-width", 2)
      .attr("d", lineMedium)

    svg
      .append("path")
      .datum(data)
      .attr("fill", "none")
      .attr("stroke", "#10b981")
      .attr("stroke-width", 2)
      .attr("d", lineLow)

    // Add legend
    const legend = svg.append("g").attr("transform", `translate(${width - 150}, 0)`)

    const legendItems = [
      { label: "Critical", color: "#ef4444" },
      { label: "High", color: "#f97316" },
      { label: "Medium", color: "#eab308" },
      { label: "Low", color: "#10b981" },
    ]

    legendItems.forEach((item, i) => {
      const legendRow = legend.append("g").attr("transform", `translate(0, ${i * 20})`)

      legendRow.append("rect").attr("width", 10).attr("height", 10).attr("fill", item.color)

      legendRow
        .append("text")
        .attr("x", 15)
        .attr("y", 10)
        .attr("text-anchor", "start")
        .attr("fill", "#e5e7eb")
        .style("font-size", "12px")
        .text(item.label)
    })
  }, [timeRange])

  // Generate sample data based on time range
  const generateData = (range: string) => {
    let days
    switch (range) {
      case "7d":
        days = 7
        break
      case "90d":
        days = 90
        break
      case "1y":
        days = 365
        break
      case "30d":
      default:
        days = 30
        break
    }

    const data = []
    const now = new Date()

    for (let i = days; i >= 0; i--) {
      const date = new Date(now)
      date.setDate(date.getDate() - i)

      // Generate some random but somewhat realistic data
      // Critical vulnerabilities are less common than low ones
      const critical = Math.floor(Math.random() * 5) + ((days - i) % 3)
      const high = Math.floor(Math.random() * 8) + ((days - i) % 5)
      const medium = Math.floor(Math.random() * 12) + ((days - i) % 7)
      const low = Math.floor(Math.random() * 15) + ((days - i) % 10)

      data.push({ date, critical, high, medium, low })
    }

    return data
  }

  return (
    <div className="w-full h-full">
      <svg ref={svgRef} className="w-full h-full"></svg>
    </div>
  )
}

