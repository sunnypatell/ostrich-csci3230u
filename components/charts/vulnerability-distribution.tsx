"use client"

import { useEffect, useRef } from "react"
import * as d3 from "d3"

export default function VulnerabilityDistribution() {
  const svgRef = useRef<SVGSVGElement>(null)

  useEffect(() => {
    if (!svgRef.current) return

    // Clear any existing SVG content
    d3.select(svgRef.current).selectAll("*").remove()

    // Sample data - in a real app, this would come from an API
    const data = [
      { severity: "Critical", count: 8, color: "#ef4444" },
      { severity: "High", count: 15, color: "#f97316" },
      { severity: "Medium", count: 24, color: "#eab308" },
      { severity: "Low", count: 18, color: "#10b981" },
      { severity: "Info", count: 35, color: "#3b82f6" },
    ]

    // Set up dimensions
    const margin = { top: 20, right: 30, bottom: 40, left: 40 }
    const width = svgRef.current.clientWidth - margin.left - margin.right
    const height = 300 - margin.top - margin.bottom

    // Create SVG
    const svg = d3
      .select(svgRef.current)
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`)

    // X scale
    const x = d3
      .scaleBand()
      .domain(data.map((d) => d.severity))
      .range([0, width])
      .padding(0.3)

    // Y scale
    const y = d3
      .scaleLinear()
      .domain([0, d3.max(data, (d) => d.count) || 0])
      .nice()
      .range([height, 0])

    // Add X axis
    svg
      .append("g")
      .attr("transform", `translate(0,${height})`)
      .call(d3.axisBottom(x))
      .selectAll("text")
      .attr("fill", "#9ca3af") // text color

    // Add Y axis
    svg.append("g").call(d3.axisLeft(y)).selectAll("text").attr("fill", "#9ca3af") // text color

    // Add grid lines
    svg
      .append("g")
      .attr("class", "grid")
      .call(
        d3
          .axisLeft(y)
          .tickSize(-width)
          .tickFormat(() => ""),
      )
      .selectAll("line")
      .attr("stroke", "#374151")
      .attr("stroke-opacity", 0.3)

    // Add bars
    svg
      .selectAll(".bar")
      .data(data)
      .enter()
      .append("rect")
      .attr("class", "bar")
      .attr("x", (d) => x(d.severity) || 0)
      .attr("width", x.bandwidth())
      .attr("y", height)
      .attr("height", 0)
      .attr("fill", (d) => d.color)
      .attr("rx", 4) // rounded corners
      .transition()
      .duration(800)
      .delay((_, i) => i * 100)
      .attr("y", (d) => y(d.count))
      .attr("height", (d) => height - y(d.count))

    // Add labels on top of bars
    svg
      .selectAll(".label")
      .data(data)
      .enter()
      .append("text")
      .attr("class", "label")
      .attr("x", (d) => (x(d.severity) || 0) + x.bandwidth() / 2)
      .attr("y", (d) => y(d.count) - 5)
      .attr("text-anchor", "middle")
      .attr("fill", "#e5e7eb")
      .attr("opacity", 0)
      .text((d) => d.count)
      .transition()
      .duration(800)
      .delay((_, i) => i * 100 + 400)
      .attr("opacity", 1)
  }, [])

  return (
    <div className="w-full h-[300px]">
      <svg ref={svgRef} className="w-full h-full"></svg>
    </div>
  )
}

