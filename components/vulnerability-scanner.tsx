"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { fetchVulnerabilities } from "@/lib/api"
import {
  AlertCircle,
  AlertTriangle,
  Info,
  Play,
  Clock,
  CheckCircle,
  XCircle,
  Filter,
  Globe,
  Server,
} from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface Vulnerability {
  id: string
  name: string
  description: string
  severity: "critical" | "high" | "medium" | "low" | "info"
  cve?: string
  cvss?: number
  affected: string
  status: "open" | "fixed" | "false_positive"
  discovered: string
  remediation?: string
}

export default function VulnerabilityScanner() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isScanning, setIsScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [scanTarget, setScanTarget] = useState("")
  const [activeFilter, setActiveFilter] = useState<string>("all")
  const [searchTerm, setSearchTerm] = useState("")
  const [scanType, setScanType] = useState("vulnerability")
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const loadVulnerabilities = async () => {
      try {
        // In a real app, this would be an API call
        const data = await fetchVulnerabilities()
        setVulnerabilities(data)
      } catch (error) {
        console.error("Error loading vulnerabilities:", error)
      } finally {
        setIsLoading(false)
      }
    }

    loadVulnerabilities()
  }, [])

  const handleScan = async () => {
    if (!scanTarget.trim()) {
      setError("Please enter a target to scan")
      return
    }

    setError(null)
    setIsScanning(true)
    setScanProgress(0)

    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval)
          return 100
        }
        return prev + 2
      })
    }, 200)

    try {
      // Make the actual API call based on scan type
      let endpoint = ""
      switch (scanType) {
        case "vulnerability":
          endpoint = "/api/scan/vulnerability"
          break
        case "webapp":
          endpoint = "/api/scan/webapp"
          break
        case "network":
          endpoint = "/api/scan/network"
          break
        default:
          endpoint = "/api/scan/vulnerability"
      }

      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ target: scanTarget }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || "Scan failed")
      }

      const data = await response.json()

      // Process the scan results
      const newVulnerabilities = processVulnerabilities(data.data, scanType)

      // Wait for progress to complete
      setTimeout(() => {
        setVulnerabilities((prev) => [...newVulnerabilities, ...prev])
        setIsScanning(false)
        clearInterval(interval)
        setScanProgress(100)
      }, 1000)
    } catch (error: any) {
      console.error("Error during scan:", error)
      setError(error.message || "Scan failed")
      setIsScanning(false)
      clearInterval(interval)
    }
  }

  // Process different types of vulnerability data
  const processVulnerabilities = (data: any, type: string): Vulnerability[] => {
    if (type === "vulnerability" || type === "webapp") {
      return data.vulnerabilities.map((vuln: any) => ({
        id: vuln.id,
        name: vuln.name,
        description: vuln.description,
        severity: vuln.severity,
        cve: vuln.cve || "N/A",
        cvss: vuln.cvss,
        affected: vuln.affected,
        status: "open",
        discovered: new Date().toISOString(),
        remediation: vuln.remediation,
      }))
    } else if (type === "network") {
      // Process network scan results
      return data.ports.map((port: any) => ({
        id: `port-${port.port}-${Date.now()}`,
        name: `Open Port: ${port.port}/${port.protocol}`,
        description: `Service: ${port.service} ${port.version || ""}`,
        severity: port.service === "ssh" || port.service === "telnet" ? "medium" : "low",
        affected: `${scanTarget}:${port.port}`,
        status: "open",
        discovered: new Date().toISOString(),
      }))
    }

    return []
  }

  const getSeverityBadge = (severity: Vulnerability["severity"]) => {
    switch (severity) {
      case "critical":
        return (
          <Badge variant="outline" className="bg-red-900/20 text-red-500 border-red-800">
            <AlertCircle className="h-3 w-3 mr-1" /> Critical
          </Badge>
        )
      case "high":
        return (
          <Badge variant="outline" className="bg-orange-900/20 text-orange-500 border-orange-800">
            <AlertTriangle className="h-3 w-3 mr-1" /> High
          </Badge>
        )
      case "medium":
        return (
          <Badge variant="outline" className="bg-yellow-900/20 text-yellow-500 border-yellow-800">
            <AlertTriangle className="h-3 w-3 mr-1" /> Medium
          </Badge>
        )
      case "low":
        return (
          <Badge variant="outline" className="bg-emerald-900/20 text-emerald-500 border-emerald-800">
            <Info className="h-3 w-3 mr-1" /> Low
          </Badge>
        )
      case "info":
        return (
          <Badge variant="outline" className="bg-blue-900/20 text-blue-500 border-blue-800">
            <Info className="h-3 w-3 mr-1" /> Info
          </Badge>
        )
    }
  }

  const getStatusBadge = (status: Vulnerability["status"]) => {
    switch (status) {
      case "open":
        return (
          <Badge variant="outline" className="bg-red-900/20 text-red-500 border-red-800">
            <XCircle className="h-3 w-3 mr-1" /> Open
          </Badge>
        )
      case "fixed":
        return (
          <Badge variant="outline" className="bg-emerald-900/20 text-emerald-500 border-emerald-800">
            <CheckCircle className="h-3 w-3 mr-1" /> Fixed
          </Badge>
        )
      case "false_positive":
        return (
          <Badge variant="outline" className="bg-gray-900/20 text-gray-500 border-gray-800">
            <Info className="h-3 w-3 mr-1" /> False Positive
          </Badge>
        )
    }
  }

  const filteredVulnerabilities = vulnerabilities.filter((vuln) => {
    // Apply status filter
    if (activeFilter !== "all" && vuln.status !== activeFilter) {
      return false
    }

    // Apply search filter
    if (searchTerm) {
      const term = searchTerm.toLowerCase()
      return (
        vuln.name.toLowerCase().includes(term) ||
        vuln.description.toLowerCase().includes(term) ||
        (vuln.cve && vuln.cve.toLowerCase().includes(term)) ||
        vuln.affected.toLowerCase().includes(term)
      )
    }

    return true
  })

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
        <div>
          <h2 className="text-2xl font-bold text-white">Vulnerability Scanner</h2>
          <p className="text-gray-400">Scan and manage security vulnerabilities</p>
        </div>
      </div>

      <Card className="bg-gray-800/50 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white">New Scan</CardTitle>
          <CardDescription className="text-gray-400">Enter an IP address, hostname, or URL to scan</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <Label htmlFor="target" className="text-gray-300">
                  Target
                </Label>
                <Input
                  id="target"
                  placeholder="e.g. 192.168.1.1 or example.com"
                  value={scanTarget}
                  onChange={(e) => setScanTarget(e.target.value)}
                  className="bg-gray-700 border-gray-600 text-white"
                  disabled={isScanning}
                />
                {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
              </div>
              <div className="w-full md:w-auto">
                <Label htmlFor="scan-type" className="text-gray-300">
                  Scan Type
                </Label>
                <Select value={scanType} onValueChange={setScanType} disabled={isScanning}>
                  <SelectTrigger id="scan-type" className="bg-gray-700 border-gray-600 text-white w-full">
                    <SelectValue placeholder="Select scan type" />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-800 border-gray-700 text-white">
                    <SelectItem value="vulnerability">
                      <div className="flex items-center">
                        <AlertTriangle className="h-4 w-4 mr-2 text-yellow-500" />
                        <span>Vulnerability Scan</span>
                      </div>
                    </SelectItem>
                    <SelectItem value="webapp">
                      <div className="flex items-center">
                        <Globe className="h-4 w-4 mr-2 text-blue-500" />
                        <span>Web Application Scan</span>
                      </div>
                    </SelectItem>
                    <SelectItem value="network">
                      <div className="flex items-center">
                        <Server className="h-4 w-4 mr-2 text-emerald-500" />
                        <span>Network Scan</span>
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="flex justify-end">
              <Button
                onClick={handleScan}
                disabled={isScanning || !scanTarget.trim()}
                className="bg-emerald-600 hover:bg-emerald-700"
              >
                <Play className="h-4 w-4 mr-2" />
                {isScanning ? "Scanning..." : "Start Scan"}
              </Button>
            </div>
          </div>

          {isScanning && (
            <div className="mt-4 space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Scanning {scanTarget}</span>
                <span className="text-gray-400">{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="h-2 bg-gray-700" indicatorClassName="bg-emerald-500" />
            </div>
          )}
        </CardContent>
      </Card>

      <Card className="bg-gray-800/50 border-gray-700">
        <CardHeader className="pb-2">
          <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
            <div>
              <CardTitle className="text-white">Vulnerabilities</CardTitle>
              <CardDescription className="text-gray-400">
                Found {filteredVulnerabilities.length} vulnerabilities
              </CardDescription>
            </div>

            <div className="flex flex-col sm:flex-row gap-2">
              <div className="relative">
                <Filter className="h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <Input
                  placeholder="Search vulnerabilities..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="bg-gray-700 border-gray-600 text-white pl-9 w-full sm:w-64"
                />
              </div>

              <Tabs value={activeFilter} onValueChange={setActiveFilter} className="w-full sm:w-auto">
                <TabsList className="bg-gray-700 p-1 h-10">
                  <TabsTrigger
                    value="all"
                    className="data-[state=active]:bg-emerald-500 data-[state=active]:text-white"
                  >
                    All
                  </TabsTrigger>
                  <TabsTrigger
                    value="open"
                    className="data-[state=active]:bg-emerald-500 data-[state=active]:text-white"
                  >
                    Open
                  </TabsTrigger>
                  <TabsTrigger
                    value="fixed"
                    className="data-[state=active]:bg-emerald-500 data-[state=active]:text-white"
                  >
                    Fixed
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="border-gray-700">
                  <TableHead className="text-gray-400">Vulnerability</TableHead>
                  <TableHead className="text-gray-400">Severity</TableHead>
                  <TableHead className="text-gray-400">CVE/ID</TableHead>
                  <TableHead className="text-gray-400">Affected</TableHead>
                  <TableHead className="text-gray-400">Status</TableHead>
                  <TableHead className="text-gray-400">Discovered</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {isLoading ? (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center py-8">
                      <div className="flex justify-center">
                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-500"></div>
                      </div>
                    </TableCell>
                  </TableRow>
                ) : filteredVulnerabilities.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center text-gray-500 py-8">
                      No vulnerabilities found
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredVulnerabilities.map((vuln) => (
                    <TableRow key={vuln.id} className="border-gray-700">
                      <TableCell className="font-medium">
                        <div className="text-white">{vuln.name}</div>
                        <div className="text-gray-400 text-sm mt-1">{vuln.description}</div>
                        {vuln.remediation && (
                          <div className="text-emerald-400 text-sm mt-1">
                            <strong>Remediation:</strong> {vuln.remediation}
                          </div>
                        )}
                      </TableCell>
                      <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
                      <TableCell className="text-gray-300 font-mono text-sm">
                        {vuln.cve || vuln.id}
                        {vuln.cvss && <div className="text-yellow-400 mt-1">CVSS: {vuln.cvss}</div>}
                      </TableCell>
                      <TableCell className="text-gray-300">{vuln.affected}</TableCell>
                      <TableCell>{getStatusBadge(vuln.status)}</TableCell>
                      <TableCell className="text-gray-400 whitespace-nowrap">
                        <div className="flex items-center">
                          <Clock className="h-3 w-3 mr-1" />
                          {new Date(vuln.discovered).toLocaleDateString()}
                        </div>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

